knitr::opts_chunk$set(echo = TRUE)
setupLibraries <- function(){
library(reshape2)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(tidyverse)
library(cowplot)
library(ggmcmc)
library(shinystan)
library(bayesplot)
}
setupLibraries()
# The wild type data needs to be extracted from its various files and imported into a R variable
wildTypeFileNames <- list.files("~/Documents/WallaceLab/preChristmas2018Work/code/RNAFracQuant/intoTheWild/notebook/schurchDataSet/wildType", full.names=TRUE)
mutantFileNames <- list.files("~/Documents/WallaceLab/preChristmas2018Work/code/RNAFracQuant/intoTheWild/notebook/schurchDataSet/snf2Mutant", full.names=TRUE)
wildTypeData <- lapply(wildTypeFileNames,read.table)
mutantData <- lapply(mutantFileNames,read.table)
# Merge replicates into same dataframe
combinedWildTypeData <- wildTypeData[[1]]
combinedMutantData <- mutantData[[1]]
for(i in 2:48){
combinedWildTypeData <- merge(combinedWildTypeData,wildTypeData[[i]],by="V1") # replicates are merged horizontally by introducing new columns
combinedMutantData <- merge(combinedMutantData,mutantData[[i]],by="V1")
}
# Give combinedWildTypeData columns suitable names
columnNames <- vector(mode="character", length=49)
columnNames[1] <- "transcriptName"
for(i in 1:48) columnNames[i+1] <- paste0("Replicate_",i)
colnames(combinedWildTypeData) <- columnNames
colnames(combinedMutantData) <- columnNames
# Remove any consistantly low count data
library(magrittr) # pipe R package
library(tidyverse) # dataframe manipulation package
usableWildTranscripts <-
combinedWildTypeData %>%
reshape::melt(id="transcriptName") %>%
group_by(transcriptName) %>%
summarise(sufficientCounts = sum(value > 5),keep=(sufficientCounts==48)) %>%
filter(keep) %$%
transcriptName
usableMutantTranscripts <-
combinedMutantData %>%
reshape::melt(id="transcriptName") %>%
group_by(transcriptName) %>%
summarise(sufficientCounts = sum(value > 5),keep=(sufficientCounts==48)) %>%
filter(keep) %$%
transcriptName
cleanWildTypeData <-
combinedWildTypeData %>%
ungroup() %>%
filter(transcriptName %in% usableWildTranscripts) %>%
filter(transcriptName %in% usableMutantTranscripts)
cleanMutantData <-
combinedMutantData %>%
ungroup() %>%
filter(transcriptName %in% usableWildTranscripts) %>%
filter(transcriptName %in% usableMutantTranscripts)
setupLibraries()
# Create Stan model
buildLognormalPoissonModel <- function(stan_data) {
stan(model_code='// -*- mode: C -*-
data {
// Number of RNAs transcipts searched for
int<lower=1> NRNA;
// Array of integers for the counts data
// for each transcript for each sample
int<lower=0> counts[NRNA,48,2];
}
parameters {
vector<lower=0>[NRNA] mu[2];
// scale factor accounting for differing total RNA counts
real <lower=0> alpha[2];
// dispersion parameter for counts
vector<lower=0>[NRNA] sigma[2]; // must explicitly state support of priors, i.e. upper and lower bounds, otherwise samplier does not act as expected!!!
}
model{
// means
for(j in 1:NRNA) for(i in 1:2) mu[i,j] ~ normal(0,1);
// Cauchy prior for lognormal dispersion parameter
for(j in 1:NRNA) for(i in 1:2) sigma[i,j] ~ cauchy(0,3);
for(i in 1:2) for(k in 1:NRNA) for(j in 1:48)  {
counts[k,j,i] ~ lognormal(alpha[i]*mu[i,k], sigma[i,k]);
}
}
',
data=stan_data,chains = 1,iter = 10)
}
# Format data and test stan model
setupLibraries()
stanData <- list(NRNA = 100,counts = array(c(c(as.matrix(cleanWildTypeData[1:100,2:49])),c(as.matrix(cleanMutantData[1:100,2:49]))), dim = c(100,48,2))) # Strange manipulation to merge multi-matrix count data into a single array
lognormalPoissonModel <- buildLognormalPoissonModel(stanData)
# Once test build is complete, run model properly
lognormalPoissonStanFit <- stan(data = stanData,iter = 1000, fit =  lognormalPoissonModel, chains = 4)
